test_set <- read.csv('bank.csv', sep = ';')
dataset <- rbind(training_set, test_set)
#Encoding Categorical Data
dataset$job =  factor(dataset$job,
levels = c("admin.", "blue-collar", "entrepreneur", "housemaid", "management",
"retired", "self-employed", "services", "student", "technician",
"unemployed", "unknown"),
labels = c(1, 2,3,4,5,6,7,8,9,10,11,12))
dataset$marital = factor(dataset$marital,
levels = c("divorced", "married", "single"),
labels = c(1, 2, 3))
dataset$education = factor(dataset$education,
levels = c("primary", "secondary", "tertiary", "unknown"),
labels = c(1,2,3,4))
dataset$default = factor(dataset$default,
levels = c("no", "yes"),
labels = c(0,1))
dataset$housing = factor(dataset$housing,
levels = c("no", "yes"),
labels = c(0,1))
dataset$loan = factor(dataset$loan,
levels = c("no", "yes"),
labels = c(0,1))
#Since most people these days use cellphones, we can impute unknown as cellular.
dataset$contact = factor(dataset$contact,
levels = c("cellular", "telephone", "unknown"),
labels = c(1,2,3))
dataset$month = factor(dataset$month,
levels = c("apr","aug","dec", "feb", "jan","jul",
"jun", "mar", "may", "nov","oct", "sep"),
labels = c(4,8,12,2,1,7,6,3,5,11,10,9))
dataset$poutcome = factor(dataset$poutcome,
levels = c("failure", "other", "success", "unknown"),
labels= c(1,2,3,4))
dataset$y = factor(dataset$y,
levels = c("no", "yes"),
labels = c(0,1))
View(dataset)
dataset = dataset[-12]
#Splitting dataset
library(caTools)
set.seed(123)
split = sample.split(dataset$y, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-16],
y = training_set$y,
ntree = 30)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-16])
# Making the Confusion Matrix
table(test_set[, 17], y_pred)
table(test_set[, 16], y_pred)
classifier = randomForest(x = training_set[-16],
y = training_set$y,
ntree = 50)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-16])
# Making the Confusion Matrix
table(test_set[, 16], y_pred)
classifier = randomForest(x = training_set[-16],
y = training_set$y,
ntree = 100)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-16])
# Making the Confusion Matrix
table(test_set[, 16], y_pred)
round(prop.table(table(all_data$job,all_data$y),1)*100,1)
round(prop.table(table(dataset$job,dataset$y),1)*100,1)
library(tidyverse)
#Importing Dataset
training_set <- read.csv('bank-full.csv', sep = ';')
test_set <- read.csv('bank.csv', sep = ';')
dataset <- rbind(training_set, test_set)
round(prop.table(table(dataset$job,dataset$y),1)*100,1)
dataset$job = recode(dataset$job, levels= "self-employed","unknown","technician", newLabel = "job_1")
dataset$job = recode(dataset$job, levs= c("self-employed","unknown","technician"), newLabel = "job_1")
dataset$job_new = recode(dataset$job, levs= c("self-employed","unknown","technician"), newLabel = "job_1")
library(rockchalk)
install.packages('rockchalk')
library(rockchalk)
combineLevels(dataset$job, levs = c("self-employed","unknown","technician"), newLabel = "job_1")
dataset$job = combineLevels(dataset$job, levs = c("self-employed","unknown","technician"), newLabel = "job_1")
View(test_set)
levels(dataset$job)
combineLevels(dataset$job, levs = c("services","housemaid","entrepreneur"), newLabel = "job_2");
rm(dataset$job)
rm(dataset)
dataset <- rbind(training_set, test_set)
combineLevels(dataset$job, levs = c("self-employed","unknown","technician"), newLabel = "job_1")
combineLevels(dataset$job, levs = c("services","housemaid","entrepreneur", "blue-collar"), newLabel = "job_2")
combineLevels(dataset$job, levs = c("management", "admin"), newLabel = "job_3")
combineLevels(dataset$job, levs = c("student"), newLabel = "job_4")
combineLevels(dataset$job, levs = c("retired"), newLabel = "job_5")
combineLevels(dataset$job, levs = c("unemployed"), newLabel = "job_6")
levels(dataset$job)
dataset$job = combineLevels(dataset$job, levs = c("self-employed","unknown","technician"), newLabel = "job_1")
levels(dataset$job)
dataset$job = combineLevels(dataset$job, levs = c("services","housemaid","entrepreneur", "blue-collar"),
newLabel = "job_2")
dataset$job = combineLevels(dataset$job, levs = c("management", "admin"), newLabel = "job_3")
dataset$job = combineLevels(dataset$job, levs = c("student"), newLabel = "job_4")
dataset$job = combineLevels(dataset$job, levs = c("retired"), newLabel = "job_5")
dataset$job = combineLevels(dataset$job, levs = c("unemployed"), newLabel = "job_6")
levels(dataset$job)
dataset$job = combineLevels(dataset$job, levs = c("management", "admin"), newLabel = "job_3")
dataset$job = combineLevels(dataset$job, levs = c("management", "admin."), newLabel = "job_3")
levels(dataset$job)
dataset$job =  factor(dataset$job,
levels = c("job_1", "job_2", "job_3", "job_4", "job_5", "job_6"),
labels = c(1, 2,3,4,5,6))
table(dataset$marital)
dataset$marital = factor(dataset$marital,
levels = c("divorced", "married", "single"),
labels = c(1, 2, 3))
table(dataset$education)
table(dataset$education)
dataset$education = factor(dataset$education,
levels = c("primary", "secondary", "tertiary", "unknown"),
labels = c(1,2,3,4))
dataset$default = factor(dataset$default,
levels = c("no", "yes"),
labels = c(0,1))
dataset$housing = factor(dataset$housing,
levels = c("no", "yes"),
labels = c(0,1))
dataset$loan = factor(dataset$loan,
levels = c("no", "yes"),
labels = c(0,1))
table(dataset$contact)
dataset$contact = factor(dataset$contact,
levels = c("cellular", "telephone", "unknown"),
labels = c(1,2,3))
table(dataset$month)
round(prop.table(table(all_data$month,all_data$y),1)*100,1)
round(prop.table(table(dataset$month,dataset$y),1)*100,1)
dataset$month = combineLevels(dataset$month, levs = c("dec", "sep", "oct"), newLabel = "month1")
dataset$month = combineLevels(dataset$month, levs = c("aug","jan", "jun", "jul", "nov"), newLabel = "month2")
dataset$month = combineLevels(dataset$month, levs = c("march"), newLabel = "month3")
dataset$month = combineLevels(dataset$month, levs = c("apr"), newLabel = "month4")
dataset$month = combineLevels(dataset$month, levs = c("feb"), newLabel = "month5")
dataset$month = combineLevels(dataset$month, levs = c("may"), newLabel = "month6")
dataset$month = factor(dataset$month,
levels = c("month1", "month2", "month3", "month4", "month5", "month6"),
labels = c(1,2,3,4,5,6))
levels(dataset$month)
dataset$poutcome = factor(dataset$poutcome,
levels = c("failure", "other", "success", "unknown"),
labels= c(1,2,3,4))
dataset$y = factor(dataset$y,
levels = c("no", "yes"),
labels = c(0,1))
dataset = dataset[-12]
library(caTools)
set.seed(123)
split = sample.split(dataset$y, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-16],
y = training_set$y,
ntree = 50)
plot_missing(dataset)
# Quick Data exploration (Missing values)
library(DataExplorer)
plot_missing(dataset)
View(training_set)
sum(is.na(dataset))
levels(dataset$month)
rm(dataset)
dataset <- rbind(training_set, test_set)
round(prop.table(table(dataset$job,dataset$y),1)*100,1)
dataset$job = combineLevels(dataset$job, levs = c("self-employed","unknown","technician"), newLabel = "job_1")
dataset$job = combineLevels(dataset$job, levs = c("services","housemaid","entrepreneur", "blue-collar"),
newLabel = "job_2")
dataset$job = combineLevels(dataset$job, levs = c("management", "admin."), newLabel = "job_3")
dataset$job = combineLevels(dataset$job, levs = c("student"), newLabel = "job_4")
dataset$job = combineLevels(dataset$job, levs = c("retired"), newLabel = "job_5")
dataset$job = combineLevels(dataset$job, levs = c("unemployed"), newLabel = "job_6")
dataset$job =  factor(dataset$job,
levels = c("job_1", "job_2", "job_3", "job_4", "job_5", "job_6"),
labels = c(1, 2,3,4,5,6))
table(dataset$marital)
dataset$marital = factor(dataset$marital,
levels = c("divorced", "married", "single"),
labels = c(1, 2, 3))
table(dataset$education)
dataset$education = factor(dataset$education,
levels = c("primary", "secondary", "tertiary", "unknown"),
labels = c(1,2,3,4))
dataset$default = factor(dataset$default,
levels = c("no", "yes"),
labels = c(0,1))
dataset$housing = factor(dataset$housing,
levels = c("no", "yes"),
labels = c(0,1))
dataset$loan = factor(dataset$loan,
levels = c("no", "yes"),
labels = c(0,1))
table(dataset$contact)
dataset$contact = factor(dataset$contact,
levels = c("cellular", "telephone", "unknown"),
labels = c(1,2,3))
table(dataset$month)
#Combining levels with similar count to avoid redundancy
round(prop.table(table(dataset$month,dataset$y),1)*100,1)
dataset$month = combineLevels(dataset$month, levs = c("dec", "sep", "oct"), newLabel = "month1")
dataset$month = combineLevels(dataset$month, levs = c("aug","jan", "jun", "jul", "nov"), newLabel = "month2")
dataset$month = combineLevels(dataset$month, levs = c("mar"), newLabel = "month3")
dataset$month = combineLevels(dataset$month, levs = c("apr"), newLabel = "month4")
dataset$month = combineLevels(dataset$month, levs = c("feb"), newLabel = "month5")
dataset$month = combineLevels(dataset$month, levs = c("may"), newLabel = "month6")
dataset$month = factor(dataset$month,
levels = c("month1", "month2", "month3", "month4", "month5", "month6"),
labels = c(1,2,3,4,5,6))
dataset$poutcome = factor(dataset$poutcome,
levels = c("failure", "other", "success", "unknown"),
labels= c(1,2,3,4))
dataset$y = factor(dataset$y,
levels = c("no", "yes"),
labels = c(0,1))
# Duration is not counted to create a more realistic model
dataset = dataset[-12]
View(dataset)
training_set <- read.csv('bank-full.csv', sep = ';')
test_set <- read.csv('bank.csv', sep = ';')
dataset <- rbind(training_set, test_set)
dataset$job = combineLevels(dataset$job, levs = c("self-employed","unknown","technician"), newLabel = "job_1")
dataset$job = combineLevels(dataset$job, levs = c("services","housemaid","entrepreneur", "blue-collar"),
newLabel = "job_2")
dataset$job = combineLevels(dataset$job, levs = c("management", "admin."), newLabel = "job_3")
dataset$job = combineLevels(dataset$job, levs = c("student"), newLabel = "job_4")
dataset$job = combineLevels(dataset$job, levs = c("retired"), newLabel = "job_5")
dataset$job = combineLevels(dataset$job, levs = c("unemployed"), newLabel = "job_6")
dataset$job =  factor(dataset$job,
levels = c("job_1", "job_2", "job_3", "job_4", "job_5", "job_6"),
labels = c(1, 2,3,4,5,6))
levels(dataset$job)
dataset$marital = factor(dataset$marital,
levels = c("divorced", "married", "single"),
labels = c(1, 2, 3))
dataset$education = factor(dataset$education,
levels = c("primary", "secondary", "tertiary", "unknown"),
labels = c(1,2,3,4))
dataset$default = factor(dataset$default,
levels = c("no", "yes"),
labels = c(0,1))
dataset$housing = factor(dataset$housing,
levels = c("no", "yes"),
labels = c(0,1))
dataset$loan = factor(dataset$loan,
levels = c("no", "yes"),
labels = c(0,1))
table(dataset$contact)
dataset$contact = factor(dataset$contact,
levels = c("cellular", "telephone", "unknown"),
labels = c(1,2,3))
levels(dataset$month)
dataset$month = combineLevels(dataset$month, levs = c("dec", "sep", "oct"), newLabel = "month1")
dataset$month = combineLevels(dataset$month, levs = c("aug","jan", "jun", "jul", "nov"), newLabel = "month2")
dataset$month = combineLevels(dataset$month, levs = c("mar"), newLabel = "month3")
dataset$month = combineLevels(dataset$month, levs = c("apr"), newLabel = "month4")
dataset$month = combineLevels(dataset$month, levs = c("feb"), newLabel = "month5")
dataset$month = combineLevels(dataset$month, levs = c("may"), newLabel = "month6")
levels(dataset$month)
dataset$month = factor(dataset$month,
levels = c("month1", "month2", "month3", "month4", "month5", "month6"),
labels = c(1,2,3,4,5,6))
dataset$poutcome = factor(dataset$poutcome,
levels = c("failure", "other", "success", "unknown"),
labels= c(1,2,3,4))
dataset$y = factor(dataset$y,
levels = c("no", "yes"),
labels = c(0,1))
View(dataset)
sum(is.na(dataset))
dataset = dataset[-12]
set.seed(123)
split = sample.split(dataset$y, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
set.seed(123)
classifier = randomForest(x = training_set[-16],
y = training_set$y,
ntree = 50)
y_pred = predict(classifier, newdata = test_set[-16])
table(test_set[, 16], y_pred)
classifier = randomForest(x = training_set[-16],
y = training_set$y,
ntree = 100)
cm = table(test_set[, 16], y_pred)
cm
cm
cm[1]
library(DataExplorer)
plot_missing(dataset)
plot_histogram(dataset)
cm[2]
cm
cm[1][1]
cm[2][1]
cm[2]
specificity = cm[1]/(cm[1]+cm[2])
cm[1][2]
cm[3]
cm[4]
sensitivity = cm[3]/(cm[3]+cm[4])
sensitivity = cm[4]/(cm[3]+cm[4])
importance(classifier, type = 1)
library(randomForest)
importance(classifier, type = 1)
t <- importance(classifier, type = 1)
View(t)
library(caret)
cm <- confusionMatrix(y_pred, test_set$y)
View(cm)
confusionMatrix(y_pred, test_set$y)
varImpPlot(classifier)
varImp(classifier)
#Importing Libraries
library(tidyverse)
library(rockchalk)
library(caret)
#Importing Dataset
training_set <- read.csv('bank-full.csv', sep = ';')
test_set <- read.csv('bank.csv', sep = ';')
dataset <- rbind(training_set, test_set)
#Data Preprocessing
summary(dataset)
#Plot missing values
plot_missing(dataset)
library(DataExplorer)
#Plot missing values
plot_missing(dataset)
#Continuous variables
plot_histogram(dataset)
#Categorical Variables
plot_bar(dataset)
round(prop.table(table(dataset$job,dataset$y),1)*100,1)
dataset$job = combineLevels(dataset$job, levs = c("self-employed","unknown","technician"), newLabel = "job_1")
dataset$job = combineLevels(dataset$job, levs = c("services","housemaid","entrepreneur", "blue-collar"),
newLabel = "job_2")
dataset$job = combineLevels(dataset$job, levs = c("management", "admin."), newLabel = "job_3")
dataset$job = combineLevels(dataset$job, levs = c("student"), newLabel = "job_4")
dataset$job = combineLevels(dataset$job, levs = c("retired"), newLabel = "job_5")
dataset$job = combineLevels(dataset$job, levs = c("unemployed"), newLabel = "job_6")
dataset$job =  factor(dataset$job,
levels = c("job_1", "job_2", "job_3", "job_4", "job_5", "job_6"),
labels = c(1, 2,3,4,5,6))
table(dataset$marital)
dataset$marital = factor(dataset$marital,
levels = c("divorced", "married", "single"),
labels = c(1, 2, 3))
table(dataset$education)
dataset$education = factor(dataset$education,
levels = c("primary", "secondary", "tertiary", "unknown"),
labels = c(1,2,3,4))
dataset$default = factor(dataset$default,
levels = c("no", "yes"),
labels = c(0,1))
dataset$housing = factor(dataset$housing,
levels = c("no", "yes"),
labels = c(0,1))
dataset$loan = factor(dataset$loan,
levels = c("no", "yes"),
labels = c(0,1))
table(dataset$contact)
dataset$contact = factor(dataset$contact,
levels = c("cellular", "telephone", "unknown"),
labels = c(1,2,3))
table(dataset$month)
#Combining levels with similar count to avoid redundancy
round(prop.table(table(dataset$month,dataset$y),1)*100,1)
dataset$month = combineLevels(dataset$month, levs = c("dec", "sep", "oct"), newLabel = "month1")
dataset$month = combineLevels(dataset$month, levs = c("aug","jan", "jun", "jul", "nov"), newLabel = "month2")
dataset$month = combineLevels(dataset$month, levs = c("mar"), newLabel = "month3")
dataset$month = combineLevels(dataset$month, levs = c("apr"), newLabel = "month4")
dataset$month = combineLevels(dataset$month, levs = c("feb"), newLabel = "month5")
dataset$month = combineLevels(dataset$month, levs = c("may"), newLabel = "month6")
dataset$month = factor(dataset$month,
levels = c("month1", "month2", "month3", "month4", "month5", "month6"),
labels = c(1,2,3,4,5,6))
dataset$poutcome = factor(dataset$poutcome,
levels = c("failure", "other", "success", "unknown"),
labels= c(1,2,3,4))
dataset$y = factor(dataset$y,
levels = c("no", "yes"),
labels = c(0,1))
# Duration is not counted to create a more realistic model
dataset = dataset[-12]
library(caTools)
set.seed(123)
split = sample.split(dataset$y, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-16],
y = training_set$y,
ntree = 100)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-16])
confusionMatrix(y_pred, test_set$y)
varImp(classifier)
# Chunk 1
#Importing Libraries
library(tidyverse)
library(rockchalk)
library(caret)
# Chunk 2
#Importing Dataset
training_set <- read.csv('bank-full.csv', sep = ';')
test_set <- read.csv('bank.csv', sep = ';')
dataset <- rbind(training_set, test_set)
# Chunk 3
#Data Preprocessing
summary(dataset)
# Quick Data exploration (Missing values)
library(DataExplorer)
#Plot missing values
plot_missing(dataset)
#Continuous variables
plot_histogram(dataset)
#Categorical Variables
plot_bar(dataset)
# Chunk 4
#Encoding Categorical Data
#Combining levels with similar proportions to avoid redundancy
round(prop.table(table(dataset$job,dataset$y),1)*100,1)
dataset$job = combineLevels(dataset$job, levs = c("self-employed","unknown","technician"), newLabel = "job_1")
dataset$job = combineLevels(dataset$job, levs = c("services","housemaid","entrepreneur", "blue-collar"),
newLabel = "job_2")
dataset$job = combineLevels(dataset$job, levs = c("management", "admin."), newLabel = "job_3")
dataset$job = combineLevels(dataset$job, levs = c("student"), newLabel = "job_4")
dataset$job = combineLevels(dataset$job, levs = c("retired"), newLabel = "job_5")
dataset$job = combineLevels(dataset$job, levs = c("unemployed"), newLabel = "job_6")
dataset$job =  factor(dataset$job,
levels = c("job_1", "job_2", "job_3", "job_4", "job_5", "job_6"),
labels = c(1, 2,3,4,5,6))
table(dataset$marital)
dataset$marital = factor(dataset$marital,
levels = c("divorced", "married", "single"),
labels = c(1, 2, 3))
table(dataset$education)
dataset$education = factor(dataset$education,
levels = c("primary", "secondary", "tertiary", "unknown"),
labels = c(1,2,3,4))
dataset$default = factor(dataset$default,
levels = c("no", "yes"),
labels = c(0,1))
dataset$housing = factor(dataset$housing,
levels = c("no", "yes"),
labels = c(0,1))
dataset$loan = factor(dataset$loan,
levels = c("no", "yes"),
labels = c(0,1))
table(dataset$contact)
dataset$contact = factor(dataset$contact,
levels = c("cellular", "telephone", "unknown"),
labels = c(1,2,3))
table(dataset$month)
#Combining levels with similar count to avoid redundancy
round(prop.table(table(dataset$month,dataset$y),1)*100,1)
dataset$month = combineLevels(dataset$month, levs = c("dec", "sep", "oct"), newLabel = "month1")
dataset$month = combineLevels(dataset$month, levs = c("aug","jan", "jun", "jul", "nov"), newLabel = "month2")
dataset$month = combineLevels(dataset$month, levs = c("mar"), newLabel = "month3")
dataset$month = combineLevels(dataset$month, levs = c("apr"), newLabel = "month4")
dataset$month = combineLevels(dataset$month, levs = c("feb"), newLabel = "month5")
dataset$month = combineLevels(dataset$month, levs = c("may"), newLabel = "month6")
dataset$month = factor(dataset$month,
levels = c("month1", "month2", "month3", "month4", "month5", "month6"),
labels = c(1,2,3,4,5,6))
dataset$poutcome = factor(dataset$poutcome,
levels = c("failure", "other", "success", "unknown"),
labels= c(1,2,3,4))
dataset$y = factor(dataset$y,
levels = c("no", "yes"),
labels = c(0,1))
# Duration is not counted to create a more realistic model
dataset = dataset[-12]
# Chunk 5
#Splitting dataset
library(caTools)
set.seed(123)
split = sample.split(dataset$y, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Chunk 6
# Fitting Random Forest Classification to the Training set
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-16],
y = training_set$y,
ntree = 100)
# Chunk 7
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-16])
confusionMatrix(y_pred, test_set$y)
varImp(classifier)
#Importing Libraries
library(tidyverse)
library(rockchalk)
library(caret)
#Importing Dataset
training_set <- read.csv('bank-full.csv', sep = ';')
setwd("C:/Users/Yash Vora/Desktop/Bank_problem")
training_set <- read.csv('bank-full.csv', sep = ';')
